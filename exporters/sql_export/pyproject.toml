# SPDX-FileCopyrightText: 2019-2020 Magenta ApS
# SPDX-License-Identifier: MPL-2.0
[tool.poetry]
name = "SQLExport"
version = "0.0.0"  # versioning handled by conventional commits
description = "Actual State SQL export"
authors = ["Magenta <info@magenta.dk>"]
license = "MPL-2.0"
homepage = "https://magenta.dk/"
repository = "https://git.magenta.dk/rammearkitektur/os2mo-data-import-and-export"
keywords = ["os2mo", "dipex", "sql_export"]

[tool.poetry.dependencies]
python = "^3.11"
SQLAlchemy = "^1.4.39"
alembic = "^1.8.1"
fastapi = "^0.111.0"
requests = "^2.28.1"  # only used in the old lora cache
retrying = "^1.3.3"  # only used in the old lora cache
click = "^8.1.3"
aiofiles = "^23.1.0"
gql = "^3.4.0"
raclients = "^3.3.3"
ra-utils = {extras = ["prometheus-client"], version = "^1.14.0"}
os2mo-dar-client = "^1.0.1"
prometheus-client = "^0.16.0"
os2mo-data-import = "^5.4.3"
uvicorn = "^0.22.0"
prometheus-fastapi-instrumentator = "^6.0.0"
psycopg2-binary = "^2.9.6"
sentry-sdk = "^1.22.2"
pyodbc = "^4.0.39"
fastramqpi = "^7.3.6"
pymssql = "^2.2.10"
more-itertools = "^9"
deepdiff = "^6.5.0"
mysqlclient = "^2.2.1"
ariadne-codegen = {extras = ["subscriptions"], version = "^0.7.1"}

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.1"
hypothesis = "^6.39.3"
parameterized = "^0.9.0"
pre-commit = "^3.2.2"
pytest-split = "^0.8.0"
pytest-cov = "^4.0.0"
pytest-asyncio = "^0.23.3"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.mypy]
python_version = "3.11"
warn_return_any = "True"
warn_unused_configs = "True"
check_untyped_defs = "True"
disallow_untyped_defs = "True"
plugins = "pydantic.mypy"

[tool.flake8]
max-line-length = 88
exclude = [
"__pycache__", ".mypy_cache", ".pytest_cache"
]

[tool.ariadne-codegen]
target_package_name = "autogenerated_graphql_client"
target_package_path = "./"
client_name = "GraphQLClient"
schema_path = "schema.graphql"  # curl -O http://localhost:5000/graphql/v8/schema.graphql
queries_path = "queries.graphql"
plugins = [
    # Return values directly when only a single top field is requested
    "ariadne_codegen.contrib.shorter_results.ShorterResultsPlugin",
]
[tool.ariadne-codegen.scalars.DateTime]
type = "datetime.datetime"
[tool.ariadne-codegen.scalars.UUID]
type = "uuid.UUID"
