# Generated by ariadne-codegen on 2024-05-16 09:20
# Source: queries.graphql
from datetime import datetime
from typing import Any
from typing import List
from typing import Optional
from typing import Union
from uuid import UUID

from .async_base_client import AsyncBaseClient
from .base_model import UNSET
from .base_model import UnsetType
from .query_engagements import QueryEngagements
from .query_engagements import QueryEngagementsEngagements


def gql(q: str) -> str:
    return q


class GraphQLClient(AsyncBaseClient):
    async def query_engagements(
        self,
        uuids: Union[Optional[List[UUID]], UnsetType] = UNSET,
        cursor: Union[Optional[Any], UnsetType] = UNSET,
        limit: Union[Optional[Any], UnsetType] = UNSET,
        to_date: Union[Optional[datetime], UnsetType] = UNSET,
        from_date: Union[Optional[datetime], UnsetType] = UNSET,
    ) -> QueryEngagementsEngagements:
        query = gql(
            """
            query QueryEngagements($uuids: [UUID!], $cursor: Cursor = null, $limit: int = null, $to_date: DateTime = null, $from_date: DateTime = null) {
              engagements(
                filter: {uuids: $uuids, from_date: $from_date, to_date: $to_date}
                limit: $limit
                cursor: $cursor
              ) {
                objects {
                  validities {
                    engagement_type {
                      name
                      uuid
                      user_key
                    }
                    org_unit {
                      uuid
                    }
                    person {
                      uuid
                    }
                    user_key
                    uuid
                    validity {
                      from
                      to
                    }
                    extension_1
                    extension_10
                    extension_2
                    extension_3
                    extension_4
                    extension_5
                    extension_6
                    extension_7
                    extension_8
                    extension_9
                    is_primary
                    job_function {
                      uuid
                      user_key
                      name
                    }
                    fraction
                    primary {
                      uuid
                      name
                    }
                  }
                }
                page_info {
                  next_cursor
                }
              }
            }
            """
        )
        variables: dict[str, object] = {
            "uuids": uuids,
            "cursor": cursor,
            "limit": limit,
            "to_date": to_date,
            "from_date": from_date,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return QueryEngagements.parse_obj(data).engagements
