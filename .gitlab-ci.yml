# SPDX-FileCopyrightText: 2019-2020 Magenta ApS
# SPDX-License-Identifier: MPL-2.0

################################################################################
# Changes to this file requires approval from Labs. Please add a person from   #
# Labs as required approval to your MR if you have any changes.                #
################################################################################

# For pushing of release images to work, the following environment variables have
# to set in the Gitlab UI.
# RELEASE_REGISTRY_USER
# RELEASE_REGISTRY_PASSWORD

variables:
  # Project variables
  RELEASE_REGISTRY: docker.io
  RELEASE_REGISTRY_IMAGE: index.docker.io/magentaaps/dipex
  IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}

workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH

stages:
  - lint
  - build
  - test
  - prerelease
  - release


# Lint stage
############

.lint-python: &lint-python
  stage: lint
  needs: []
  image: python:3
  services: []
  before_script:
    - pip install -r integrations/requirements/lint.txt
  tags:
    - docker


Lint Dockerfiles:
  <<: *lint-python
  image: hadolint/hadolint:latest-debian
  before_script:
    - apt-get -y update
    - apt-get -y install --no-install-recommends git
  script:
    - git ls-files --exclude='Dockerfile*' --ignored | xargs --max-lines=1 hadolint


Lint Customers files:
  extends: .lint-python
  script:
    - python -m black --diff --check customers/
    - python -m isort --profile black --diff --check-only customers/

Lint LoraCache Integration:
  extends: .lint-python
  script:
    - python -m black --diff --check exporters/sql_export/tests/*.py exporters/sql_export/sql_table_defs.py exporters/sql_export/sql_url.py exporters/sql_export/lc_for_jobs_db.py
    - python -m isort --profile black --diff --check-only exporters/sql_export/tests/*.py exporters/sql_export/sql_table_defs.py exporters/sql_export/sql_url.py exporters/sql_export/lc_for_jobs_db.py

Lint AD Integration:
  extends: .lint-python
  script:
    - cd integrations/ad_integration/
    - pip install mypy pre-commit types-Jinja2 types-click types-requests
    - pre-commit run --files tests/*.py *.py

Lint Calculate Primary:
  extends: .lint-python
  script:
    - cd integrations/calculate_primary/
    - pip install mypy pre-commit types-requests
    - pre-commit run --files tests/*.py *.py

Lint SetAlias Tool:
  extends: .lint-python
  script:
    - python -m black --diff --check tools/snurrebasser/set_alias.py
    - python -m isort --diff --check-only tools/snurrebasser/set_alias.py

Lint SDLoen Integration:
  extends: .lint-python
  script:
    - cd integrations/SD_Lon/
    - python -m black --diff --check fix_departments.py db_overview.py sd_cli.py sd_common.py tests/*
    - python -m isort --profile black --diff --check-only fix_departments.py db_overview.py sd_cli.py sd_common.py tests/*

Lint OPUS Org Tree Print:
  extends: .lint-python
  script:
    - cd integrations/opus/org_tree_print/
    - python -m black --diff --check *.py
    - python -m isort --diff --check-only *.py

Lint Reports:
  extends: .lint-python
  script:
    - python -m black --diff --check reports/query_actualstate.py reports/XLSXExporter.py reports/os2mo_tests/test_query_actualstate.py reports/os2mo_tests/test_XLSXExporter.py
    - python -m isort --profile black --check-only reports/query_actualstate.py reports/XLSXExporter.py reports/os2mo_tests/test_query_actualstate.py reports/os2mo_tests/test_XLSXExporter.py

Lint Exporter Utils:
  extends: .lint-python
  script:
    - python -m isort --profile black --diff --check-only exporters/utils/*.py exporters/utils/tests/*.py
    - cd exporters/utils/
    - python -m black --diff --check *.py tests/*.py


Lint Tools:
  extends: .lint-python
  script:
    - cd tools/
    - python -m black --diff --line-length 85 --check uuid_replace.py
    - python -m isort --diff --check-only uuid_replace.py
    - python -m black --diff --check data_fixers
    - python -m isort --profile black --diff --check-only data_fixers

# Build stage
#############

Build TestImage:
  stage: build
  needs: []
  image:
    # We use kaniko v0.16.0 as both v0.17.0, v0.17.1, v0.18.0 and v0.19.0 contains fatal bugs.
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  tags:
    - docker
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache=true
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile
      --destination=${IMAGE_SHA}

# Test stage
############

.test-python:
  stage: test
  needs: [ 'Build TestImage' ]
  image:
    name: ${IMAGE_SHA}
  services: [ ]
  tags:
    - docker
  variables:
    GIT_STRATEGY: none # We do not need the source code
    HYPOTHESIS_PROFILE: ci
  before_script:
    - cd /code
    - cp settings/kommune-andeby.json settings/settings.json


Test LoraCache Exporter:
  extends: .test-python
  script:
    - python3 -m pytest -v exporters/sql_export/tests/

Test AD Integration:  # runs outside image (unfortunately)
  stage: test
  needs: [ 'Build TestImage' ]
  image:
    name: ${IMAGE_SHA}
  services: [ ]
  tags:
    - docker
  script:
    - python3 -m pytest -v integrations/ad_integration/tests/

Test Calculate Primary:
  extends: .test-python
  script:
    - cd integrations/calculate_primary/
    - pytest tests/


Test OS2Sync Integration:
  extends: .test-python
  variables:
    CUSTOMER_SETTINGS: /code/settings/kommune-andeby.json
  script:
    - python3 -m pytest -v integrations/os2sync/tests

Test CPR Mapper:
  extends: .test-python
  script:
    - python3 -m doctest -v integrations/cpr_mapper.py

Test OPUS Org Tree Print:
  extends: .test-python
  script:
    - python3 -m doctest -v integrations/opus/org_tree_print/main.py

Test OPUS importers:
  extends: .test-python
  script:
    - python3 -m pytest -v integrations/opus/tests

Test OPUS Helpers:
  extends: .test-python
  script:
    - python3 -m doctest -v integrations/opus/opus_helpers.py

Test SDLoen Integration:
  extends: .test-python
  script:
    - python3 -m pytest -v integrations/SD_Lon/sd_cli.py --help
    - python3 -m pytest -v integrations/SD_Lon/tests/

Test Reports:
  extends: .test-python
  script:
    - python3 -m pytest -v reports/os2mo_tests/ --ignore reports/os2mo_tests/test_viborg_managers.py

Test Exporter Utils:
  extends: .test-python
  script:
    - python3 -m pytest -v exporters/utils/tests/

Test data_fixers:
  extends: .test-python
  script:
    - python3 -m doctest -v tools/data_fixers/class_tools.py


# Release stage
###############

Build DIPEX:
# Defaults for release jobs: Run in release stage, depend on all tests,
# use a small image with skopeo installed.
.release-default: &release-default
  stage: release
  needs: ["Build TestImage", "Test data_fixers", "Test Exporter Utils", "Test Reports", "Test OPUS Helpers", "Test OPUS importers", "Test OPUS Org Tree Print", "Test CPR Mapper", "Test AD Integration"]
  image: alpine:3.13
  variables:
    GIT_STRATEGY: none # We do not need the source code
  tags:
    - docker
  before_script:
    - apk add skopeo=1.2.1-r0

Release feature branch:
  <<: *release-default
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^feature\/.+$/
  script:
    - export IMAGE_FEATURE=$(echo "$CI_COMMIT_REF_NAME" | sed 's/\//_/g')
    - echo "Releasing ${RELEASE_REGISTRY_IMAGE}:${IMAGE_FEATURE}"
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${IMAGE_SHA}"
      "docker://${RELEASE_REGISTRY_IMAGE}:${IMAGE_FEATURE}"

Release dev:
  <<: *release-default
  rules:
    - if: $CI_COMMIT_REF_NAME == "development"
  script:
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${IMAGE_SHA}"
      "docker://${RELEASE_REGISTRY_IMAGE}":latest
